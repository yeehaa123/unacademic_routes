FORMAT: 1A

# Unacademic
UnAcademic API is a *academic content curation* service.

# Group Paths
Notes related resources of the **Paths API**

## Path [/paths/{id}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Path to perform action with. Has example value.

### Get a single Path [GET]
+ Response 200 (application/json)

         {
            "id":123123,
            "curator":"Jan Hein",
            "description": "A path about web technologies",
            "version": "0.0.1",
            "license": "MIT",
            "keywords": ["web","tech"],
            "forks": [123124,123126],
            "forked_from": null,
            "places": [
                {
                    "id":123123,
                    "name":"css tutorial",
                    "image_url": "imagelocation.jpg"
                },
                {
                    "id":123124,
                    "name":"html tutorial",
                    "image_url": "imagelocation.jpg"
                }
            ],
            "learners": [2, 7, 15]
        }

### Delete a Path [DELETE]
+ Response 204 (application/json)

## Paths Collection [/paths]
### List all Paths [GET]
+ Response 200 (application/json)

        [
            {
                    "id": 123123,
                    "curator":"Jan Hein",
                    "title": "Coding the Humanities",
                    "description": "A path about web technologies",
                    "version": "0.0.1",
                    "license": "MIT",
                    "keywords": ["web","tech"],
                    "forks": [123124,123126],
                    "forked_from": null,
                    "places": [1233, 7003, 110],
                    "learners": [3, 10, 28, 33]
                },
                {
                    "id": 123124,
                    "curator":"Johanna",
                    "title": "Augmenting Masterpieces",
                    "description": "A path about web technologies",
                    "version": "1.2.3",
                    "license": "MIT",
                    "keywords": ["museums","design thinking"],
                    "forks": [],
                    "forked_from": [123123],
                    "places": [1233],
                    "learners": [3, 19, 7, 4]
                },
                {
                    "id": 123126,
                    "curator":"Marijn",
                    "title": "Digging into Data",
                    "description": "A path about web technologies",
                    "version": "1.5.1",
                    "license": "MIT",
                    "keywords": ["data","search"],
                    "forks": [],
                    "forked_from": [123123],
                    "places": [1233,7003, 110, 9999],
                    "learners": [2, 5, 19]
                },
                {
                    "id": 123144,
                    "curator":"Charlotte",
                    "title": "Content Strategy for Academics",
                    "description": "A path about web technologies",
                    "version": "2.2.9",
                    "license": "MIT",
                    "keywords": ["content","strategy"],
                    "forks": [],
                    "forked_from": null,
                    "places": [],
                    "learners": []
                },
                {
                    "id": 123128,
                    "curator":"Nigel",
                    "title": "MBA for Dummies",
                    "description": "A path about web technologies",
                    "version": "0.2.0",
                    "license": "MIT",
                    "keywords": ["business","money"],
                    "forks": [],
                    "forked_from": null,
                    "places": [1233, 7003, 110],
                    "learners": [3, 8, 10]
                },
                { 
                    id: 1,
                    curator: 'yeehaa',
                    curator_org: 'University of Amsterdam',
                    title: 'Coding the Humanities',
                    keywords: [ 'programming', 'humanities', 'tool building' ],
                    description: 'A path about programming and tool building for humanities research',
                    version: '0.1.0',
                    licence: 'MIT',
                    forks: [],
                    forked_from: null,
                    places: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 ],
                    learners: [] 
                }
        ]

### Create a Path [POST]
+ Request (application/json)

        {
            "curator":"Reika",
            "title": "Shopping without a Budget",
            "description": "A path about web technologies",
            "version": "1.2.3",
            "license": "MIT",
            "keywords": ["shopping","money"]
        }

+ Response 201 (application/json)

        {
            "id": 122128,
            "curator":"Reika",
            "title": "Shopping without a Budget",
            "description": "A path about web technologies",
            "version": "1.2.3",
            "license": "MIT",
            "keywords": ["shopping","money"]
        }

# Group Places
Places related resources of the **Unacademic API**

## Places [/places/{id}]
### Delete a Path [DELETE]
+ Response 204 (application/json)

## Places Collection [/places]
### List all Places [GET]
+ Response 200 (application/json)

        [
                {
                    "id": 123123,
                    "curator":"Jan Hein",
                    "title": "Coding the Humanities",
                    "description": "A path about web technologies",
                    "version": "0.0.1",
                    "license": "MIT",
                    "keywords": ["web","tech"]
                },
                {
                    "id": 123124,
                    "curator":"Johanna",
                    "title": "Augmenting Masterpieces",
                    "description": "A path about web technologies",
                    "version": "1.2.3",
                    "license": "MIT",
                    "keywords": ["museums","design thinking"]
                },
                {
                    "id": 123126,
                    "curator":"Marijn",
                    "title": "Digging into Data",
                    "description": "A path about web technologies",
                    "version": "1.5.1",
                    "license": "MIT",
                    "keywords": ["data","search"]
                },
                {
                    "id": 123144,
                    "curator":"Charlotte",
                    "title": "Content Strategy for Academics",
                    "description": "A path about web technologies",
                    "version": "2.2.9",
                    "license": "MIT",
                    "keywords": ["content","strategy"]
                },
                {
                    "id": 123128,
                    "curator":"Nigel",
                    "title": "MBA for Dummies",
                    "description": "A path about web technologies",
                    "version": "0.2.0",
                    "license": "MIT",
                    "keywords": ["business","money"]
                },
                { id: 1,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'CSS',
                description: 'This is the introduction to CSS (cascading style sheets). A CSS file allows  you to separate your website\'s markup content from its style. As always you  use your HTML file to arrange the content, but all of the presentation  (fonts, colors, background, borders, text formatting, link effects & so onâ€¦)  are accomplished within a CSS file.\n',
                summary: 'CSS allows you to separate your website\'s styling from its HTML content. \n',
                version: null,
                keywords: [ 'cth-design' ],
                objectives: [ 1, 2, 3, 4 ] },
                { id: 2,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'City Walk',
                description: 'You must be anxious to dive into the wonderful world of web programming. But the first thing we want you to do has sadly / luckily nothing to do with  code. The Citywalk will combine the knowledge you will get from the first  tutorials. Read on to find out how exactly you are going to do that.\n',
                summary: 'Get some last contact with the real world, before you disappear into its  virtual counterpart.\n',
                version: null,
                keywords: [ 'cth-general' ],
                objectives: [ 5, 6, 7 ] },
                { id: 3,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'Gists',
                description: 'You would think one way to share code with your peers and/or friends would  be by e-mail. But mailing one\'s code is a hassle when you have to deal with  lots of different files and endless lines of code. Another way is to place  these on Github, a website made for and by programmers to store and share  code. Github offers two ways to do that. The first is making a repository. More on this will follow later. The second way is Gist, particulary handy for code  snippets and a lot easier -though with some limitations.\n',
                summary: 'Sharing code can be quite a hassle. Github offers solutions to this problem.\n',
                version: null,
                keywords: [ 'cth-workflow' ],
                objectives: [ 8, 9, 10, 11 ] },
                { id: 4,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'HTML',
                description: 'HTML stands for Hypertext Markup Language. When you look at a web page on a  web browser you see, at the simplest level, words. HTML instructs a web  browser what content to display. In many cases a page also displays images  or maybe video clips.  HTML defines and separates "content" (words, images, audio, video, and so  on) from "presentation" (how to display a specific type of content). HTML  uses a pre-defined set of elements to identify content types.\n',
                summary: 'HTML gives directions to the web browser on what content to display.  It uses a set of elements to identify content types.\n',
                version: null,
                keywords: [ 'cth-markup' ],
                objectives: [ 12, 13, 14, 15 ] },
                { id: 5,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'DOM',
                description: 'The DOM is a different representation of the HTML in the browser.  In the DOM you can see the various objects on a page and how they relate to each other in a tree structure. The DOM can be viewed and manipulated using the javascript console in your browser. Every browser has a console, so don\'t worry about having to install yet another program on your computer.\n',
                summary: 'The DOM (Document Object Model) is the structural representation of an HTML document\n',
                version: null,
                keywords: [ 'cth-markup' ],
                objectives: [ 16, 17, 18, 19, 20 ] },
                { id: 6,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'Dev Tools',
                description: 'Very important tools to know are the developer tools in browsers. They are used for many things like bug testing and experimenting. You can also use it to see the perfomance of the site. You can view your HTML, CSS and script combined, and you can actively interact with it. Google has very nice implementations, which is one of the reasons why we use chrome as a standard browser.\n',
                summary: 'Very important tools to know are the development tools in browsers. They are used for many things like bug testing and experimenting.\n',
                version: null,
                keywords: [ 'cth-workflow' ],
                objectives: [ 21, 22, 23 ] },
                { id: 7,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'JSON',
                description: 'JSON is a data format that is widely used because it is easily parsed by computers. Many API\'s supply you with data in this format. It stands for JavaScript Object Notation, but it is not exclusively Javascript. Many other programming languages support it as well.\n',
                summary: 'JSON is an easily parsed and widely used data format.\n',
                version: null,
                keywords: [ 'cth-data' ],
                objectives: [ 24, 25, 26 ] },
                { id: 8,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'Photostack',
                description: 'Now that your feet have recovered from the walk through Amsterdam, and your fingers have recuperated from repeated clicking on a camera button, it\'s time to do something with all the photos. However, while you have an innate understanding of why you photographed six hundred cats, your fellow students might truly be baffled by this. Discuss your photos and the photos of your fellow students and make a selection. Then place them in a JSON object.\n',
                summary: 'Select five photos in groups of three people\n',
                version: null,
                keywords: [ 'cth-general' ],
                objectives: [ 27, 28 ] },
                { id: 9,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'Templating',
                description: 'HTML5 allows us to make template elements. A template can best be described as a mold with a fixed layout, which can be repeated multiple times. Instead of putting the content directly in the tags (as we did in our level 000 HTML course), the content and the tags are completely separated. This practice gives much flexibility and endless possibilities.\n',
                summary: 'HTML5 allows for template elements. A template is best described as a mold with a fixed layout, which can be repeated multiple times.\n',
                version: null,
                keywords: [ 'cth-markup' ],
                objectives: [ 29, 30, 31 ] },
                { id: 10,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'Communication Between Components',
                description: '\nBy default, web Components are encapsulated. This means they function completely on their own. But what if you actually want them to communicate with each other? Because of their encapsulation we need to explicitly tell the components what data they want to receive or send. \nWhen connected components are very powerful. They can instantly relay  information and can change each others content. \n',
                summary: 'Get components to communicate and change each others content. \n',
                version: null,
                keywords: [ 'cth-markup' ],
                objectives: [ 32, 33 ] },
                { id: 11,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'Custom Elements',
                description: 'In web development some key principles proved to be very important.  When working on a project, things can get complicated fast.  That is why we must consider the maintainability of the project. A project should be able to grow easily, for example by adding new features. \nIn order for numerous team members to collaborate, a team should be able to  easily share their work. Web components are a good way to enforce  collaboration, because you can add features by simply importing a component.  This method also results in clean and readable code. With scalability and  maintainability in mind, components can be combined, stacked or replaced. \nMost importantly because components are completely encapsulated,  it provides an easy way to share and reuse code. Working with web components is not only about creating your own custom elements but also about  incorporating other people\'s custom elements. Why create something that has  already been created? Instead of just collaborating with your team why not  share your components with the world? \nIn a very short time, this idea has already generated an active community that shares their components. There are many custom elements available; one could build an entire web application just from external components.\n',
                summary: 'Web components provide an easy way to share and reuse code. \n',
                version: null,
                keywords: [ 'cth-workflow' ],
                objectives: [ 34, 35 ] },
                { id: 12,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'From Idea To Component',
                description: 'Now that you have come up with tons of ideas on how to implement the Rijksmuseum  API, it\'s time to put one of those ideas into a real web component. It could be anything: switches, knobs, an image viewer etc. Your project  group\'s only limitation is its own imagination (and perhaps technical capabilities).  In the tasks below, you may jump back and forth between tasks, as insights in one  task may require jumping back to update a previous task. This is part of iterative  design.\n',
                summary: 'Now that you came up with tons of ideas on how to implement the Rijksmuseum  API, put one of those ideas into a real web component.\n',
                version: null,
                keywords: [ 'cth-general' ],
                objectives: [ 36, 37, 38 ] },
                { id: 13,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'Web Architecture',
                description: 'When a web page is rendered in your browser, data is being transmitted over the internet. The information that is needed to render a page is stored on a server. In order to retrieve that data the browser needs to request it from the server. These request are using a protocol called http which is the foundation of any web application.\nWhenever you want to show a change on the page, we need to send an http request to refresh the entire page, even if we just want to change one little piece of it. If we would have a widget that needs to update regularly this is obviously not the most efficient way of doing this, because it constantly has to wait for everything.\nThis is where Ajax comes in. Ajax is a method to communicate with a server in the background, without interfering with the current state of the page. This technique is what makes modern web apps possible.\n',
                summary: 'This objective helps you understand how communicating between the browser and the server works.\n',
                version: null,
                keywords: [ 'cth-workflow' ],
                objectives: [ 39, 40 ] },
                { id: 14,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'Web Components',
                description: 'Web components are the future of web development, but what are they? \nWe can for example create an element called <my-clock> that would insert a clock  displaying the time. Like any other element we could then reuse our  clock element whenever and wherever we need.  \nWeb components enable truly encapsulated and reusable components for the web. This means we can easily create widgets and other useful elements that can be easily shared, without having to retype or  rework code. That is the beauty of web components.\n',
                summary: 'Web components are reusable code elements  \n',
                version: null,
                keywords: [ 'cth-markup' ],
                objectives: [ 41, 42 ] },
                { id: 15,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'Component Lifecycle',
                description: 'Just like organisms have a certain lifecycle, webcomponents have a  lifecycle of their own. For example a component can be generated in your browser (DOM). Its attributes can be changed, or it can be  detached from the DOM. By using JavaScript we can tap into this lifecycle and add a certain amount of interactivity (lifecycle callback). For instance, you could make a loading screen by using this principle. One  of the first things we load into the DOM is a big component which covers  the whole screen (the loading page). Once the DOM is fully initiliazed we simply remove/detach this element from the DOM.\n',
                summary: 'Just like organisms have a certain lifecycle, webcomponents have a  lifecycle of their own.\n',
                version: null,
                keywords: [ 'cth-assignment' ],
                objectives: [ 43, 44 ] },
                { id: 16,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'Data Structures',
                description: 'Data comes in many forms, and data structures equally so. But as terrifying as arrays and objects might seem at first glance, they are easy to grasp in reality. \nData structures are used in all programming languages (and one  could even say in natural languages). The ways they are and  can be structured vary from language to language, but usually values are put in lists and lists within lists.\n',
                summary: 'Data comes in many forms, and data structures equally so.\n',
                version: null,
                keywords: [ 'cth-theory' ],
                objectives: [ 45, 46, 47, 48 ] },
                { id: 17,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'Forms',
                description: 'We regularly come across fields on web pages used to collect  user input, like names, e-mail addresses, checkbox answers or messages.  This bundle of features on a website is a form. Forms are the most common  interface used on websites or web applications. A form consists of different form elements called controls or widgets. Controls are usually defined by input elements which in their turn have numerous different types. So, a form can have for instance three input elements; one with type "text" for name, another one with type "email" for e-mail address and a third one with type "submit"; the well known submit  button.\n',
                summary: 'Forms are used to collect user input, like names, e-mail addresses, selected  answers or messages.\n',
                version: null,
                keywords: [ 'cth-markup' ],
                objectives: [ 49, 50, 51 ] },
                { id: 18,
                curator: 'yeehaa',
                curator_org: 'University of Amsterdam',
                contributors: '',
                title: 'From  Paper to Polymer',
                description: 'You have made a mockup on paper and now you will make a mockup using Polymer. Maybe you want to rethink your design, maybe not. That is your choice. The functionalities do not have to work yet, but you will have to create a response. This is a group assignment, so make sure you all agree on the design of the mockup and divide the components or features amongst yourselves.\n',
                summary: 'From paper to Polymer, taking mocking up to a next level.\n',
                version: null,
                keywords: [ 'cth-design' ],
                objectives: [ 52, 53, 54 ] } 
        ]

### Create a Place [POST]
+ Request (application/json)

        {
            "curator":"Reika",
            "title": "Shopping without a Budget",
            "description": "A path about web technologies",
            "version": "1.2.3",
            "license": "MIT",
            "keywords": ["shopping","money"]
        }

+ Response 201 (application/json)

        {
            "id": 122128,
            "curator":"Reika",
            "title": "Shopping without a Budget",
            "description": "A path about web technologies",
            "version": "1.2.3",
            "license": "MIT",
            "keywords": ["shopping","money"]
        }
